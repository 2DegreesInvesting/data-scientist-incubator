[
["index.html", "ds-incubator Introduction", " ds-incubator Mauro Lepore CJ Yetman Jackson Hoffart Klaus Hagedorn Clare Murray 2019-10-15 Introduction This book contains materials presented at meetups of the ds-incubator. The goal of the ds-incubator (data science incubator) is to share best practices in coding. It helps us to become better data scientists and to improve out work at at 2° Investing Initiative. This project is managed by Mauro with support from CJ and guidance from Klaus and Clare. Since mid-October, 2019 we meetup online weekly, and we plan a personal meetup in 2020. We welcome contributions from everyone at 2° Investing Initiative. Links: Website / eBook. Videos. Meetups. Ideas. ds-incubator by Mauro Lepore, CJ Yetman, Jackson Hoffart, Klaus Hagedorn, Clare Murray is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],
["setup-github-r-rstudio-git.html", "Chapter 1 2019-10-15: Setup GitHub, R, RStudio, Git 1.1 Register a free GitHub account 1.2 Install or update R and RStudio AND Install Git 1.3 Introduce yourself to Git (TODO) 1.4 Prove local Git can talk to GitHub (SKIP) 1.5 Cache your username and password or set up SSH keys (DONE) 1.6 Prove RStudio can find local Git (TODO) 1.7 Contemplate if you’d like to install an optional Git client", " Chapter 1 2019-10-15: Setup GitHub, R, RStudio, Git Based on Happy Git and GitHub for the useR, by Jenny Bryan, the STAT 545 TAs, and Jim Hester. 1.1 Register a free GitHub account Your username should be timeless, so you accumulate credit (exclude your employer; add your work email to your personal account). Your GitHub username, and definiterly your profile, should have your name. This makes it easy for people to search your name and find your username. People need your username to @mention you on GitHub (e.g. to thank you or discuss issues). 1.2 Install or update R and RStudio AND Install Git How to (a) think (b) about (c) upgrading software. If it hurts so it more often. If you have this kind of exponential relationship, then if you do it more frequently, you can drastically reduce the pain. – Martin Fowler in FrequencyReducesDifficulty 1.3 Introduce yourself to Git (TODO) # My ~/.gitconfig at the start git config --global --list #Email associated with GitHub git config --global user.email &quot;maurolepore@gmail.com&quot; git config --global user.name &quot;Mauro Lepore&quot; # Other very useful configurations git config --global push.default &quot;current&quot; git config --global core.editor &quot;notepad&quot; git config --global credential.helper &quot;manager&quot; # My ~/.gitconfig at the end git config --global --list 1.4 Prove local Git can talk to GitHub (SKIP) Login to http://github.com/ On GitHub: Create a repo Add description. Add README.md Copy https clone link On Git Bash: # Clone new repo and move to it git clone &lt;URL&gt; cd &lt;new repo&gt; # Edit README ## Before cat README.md echo &quot;A line from local computer&quot; &gt;&gt; README.md ## After cat README.md # Commit and push git add . git commit -m &quot;Edit README from local computer&quot; git push Check if credentials are managed correctly: Repeat edit, commit and push (you should no longer be challenged for a username and password). 1.5 Cache your username and password or set up SSH keys (DONE) We should be done. We already added this: git config —global credential.helper manager If we need to remove your git credentials on Windows, they are here: Control Panel &gt; user accounts &gt; credential manager &gt; Windows credentials &gt; Generic credentials SSH: Skip. 1.6 Prove RStudio can find local Git (TODO) Login to http://github.com/ On GitHub: Create a repo Add description. Add README.md Copy https clone link On RStudio: File &gt; New Project … &gt; Version Control &gt; Git Edit README, commit and push. Do it twice to confirm that the credential manager works as expected. 1.7 Contemplate if you’d like to install an optional Git client I recommend GitKraken: https://www.gitkraken.com/download "],
["encodings.html", "Chapter 2 2019-10-22: Encodings", " Chapter 2 2019-10-22: Encodings CJ Yetman https://github.com/2DegreesInvesting/ds-incubator/issues/7 "],
["pull-request-helpers.html", "Chapter 3 2019-10-29: pull request helpers 3.1 Setup 3.2 For contributors 3.3 More setup", " Chapter 3 2019-10-29: pull request helpers GitHub issue for this meetup. We’ll walk through the help file of the Helpers for GitHub pull requests 3.1 Setup Read Setup advice and if you need more help: Need more help? See More setup. 3.2 For contributors To contribute to a package, first use create_from_github(owner/repo) to fork the source repository, and then check out a local copy. Or fork and clone as usual. pr_init() 3.3 More setup Instructions to setup GitHub, R, RStudio, and Git. usethis setup Get and store a GitHub personal access token. "],
["usethispr-sync.html", "Chapter 4 2019-11-05: usethis::pr_sync( ) 4.1 create_from_github() 4.2 git_sitrep() 4.3 pr_init(\"pr\") 4.4 pr_push() 4.5 pr_sync() 4.6 Solve merge conflicts 4.7 pr_push() 4.8 [pr] now has no conflicts with [upstream/master] 4.9 pr_finish()", " Chapter 4 2019-11-05: usethis::pr_sync( ) Before merging your pull request, the source repository adds a conflicting commit. Now what? “pr_sync( ) is a shortcut for pr_pull( ), pr_pull_upstream( ), and pr_push( )” (usethis) https://twitter.com/mauro_lepore License: CCO 4.1 create_from_github() # Fork on GitHub, then run from a terminal: git clone git@github.com:maurolepore/abc.git cd abc # Contrib@LAPTOP ~/abc (master) git remote add upstream git@github.com:an-org/abc.git git pull upstream master git branch --set-upstream-to=upstream/master 4.2 git_sitrep() git remote -v 4.3 pr_init(\"pr\") # Contrib@LAPTOP ~/abc (master) git pull upstream master git branch pr git checkout pr 4.4 pr_push() # Contrib@LAPTOP ~/abc (pr) git push origin git branch --set-upstream-to=origin/pr https://github.com/maurolepore/abc/compare/pr But before [pr] is merged, the maintainer adds a conflicting change to the source repository 4.5 pr_sync() # Contrib@LAPTOP ~/abc (pr) # Using default remote &quot;origin&quot; and branch &quot;pr&quot; # `git pull` is shorthand for `git fetch &amp;&amp; git merge FETCH_HEAD` git pull git pull upstream master git push 4.6 Solve merge conflicts 4.7 pr_push() # Contrib@LAPTOP ~/abc (pr) # Retry sync git pull git pull upstream master git push 4.8 [pr] now has no conflicts with [upstream/master] 4.9 pr_finish() # Contrib@LAPTOP ~/abc (pr) git checkout master # Contrib@LAPTOP ~/abc (master) git pull upstream master git push -d origin pr git branch -d pr "],
["interdependent-pull-requests.html", "Chapter 5 2019-11-12: Interdependent pull requests 5.1 Situation 5.2 pr_init(\"pr1\") 5.3 New f() 5.4 pr_push() 5.5 pr_init(\"pr2\") 5.6 New g() 5.7 pr_push() 5.8 pr_fetch() (Maintainer) 5.9 Edit pr1 (Maintainer) 5.10 pr_push() (Maintainer) 5.11 pr_sync() 5.12 Fix pr2 then pr_push() 5.13 Squash-merge pr2 (Maintainer) 5.14 pr_finish()", " Chapter 5 2019-11-12: Interdependent pull requests 5.1 Situation After the contributor submitted a first pull request (pr1), and before the maintainer merges it into the source repository, the contributor starts a second pull request (pr2) that depends on pr1. The maintainer edits pr1 and accepts it (squash-merges it into the upstream/master). But pr2 now is a mess and the contributor must fix it before it can be merged. 5.2 pr_init(\"pr1\") 5.3 New f() 5.4 pr_push() 5.5 pr_init(\"pr2\") 5.6 New g() 5.7 pr_push() 5.8 pr_fetch() (Maintainer) 5.9 Edit pr1 (Maintainer) 5.10 pr_push() (Maintainer) 5.11 pr_sync() 5.12 Fix pr2 then pr_push() 5.13 Squash-merge pr2 (Maintainer) 5.14 pr_finish() "],
["installing-packages-in-r.html", "Chapter 6 2019-11-19: Installing packages in R", " Chapter 6 2019-11-19: Installing packages in R CJ Yetman Installing packages in R is more complicated than it seems Structure of a package R files Text based config files Help files Potentially source files in other languages (C, C++, Fortran, etc.) Submitted to CRAN, hosted on GitHub, or hosted on other CRAN-like repository (BioConductor, private repos, local etc.) Packages are primarily distributed as source packages (raw text files just as you would see in a GitHub repo for a package) BUT… some repos, like CRAN, pre-compile source packages into binaries which are platform specific EASY - when you install a binary package (if one is available for your platform), your R environment won’t have to do any processing to make the package work EASY - if only a source version of the package is available and the package is written entirely in R (plus various text config files and help files), your R environment should be able to process the package and prepare it for use on your machine without any trouble EASY-&gt;NIGHTMARE - if only a source version of the package is available and the package includes source files written in a language other than R, your machine will need to be fully setup as a development environment for whatever other languages are used macOS: command line developer tools plus custom clang and fortran https://cran.r-project.org/bin/macosx/tools/ Windows: Rtools https://cran.r-project.org/bin/windows/Rtools/ Suggestion: Install binary packages whenever possible remotes::install_github() (devtools::install_github()) devtools is a package of tools to help with package development remotes was created from just the install functions of devtools to create a light-weight package for installing from different locations There are numerous remotes::install_* functions These will install packages directly from their development repository Installs as source, with all the potential problems above Sometimes advantageous to get recent bug fixes etc. that have not been released on CRAN yet "],
["access-permissions-for-a-github-organization.html", "Chapter 7 2019-11-26: Access permissions for a GitHub organization 7.1 Situation 7.2 Set the usual plumbing 7.3 Initiate and work on your PR 7.4 Synchronize, push, and submit your PR 7.5 But something goes wrong 7.6 What happens when you push? 7.7 Owner, billing manager &amp; member 7.8 Members, teams &amp; outside collaborators 7.9 Permission levels for repositories 7.10 Permission levels for repositories (continued) 7.11 Example 7.12 Conclusion", " Chapter 7 2019-11-26: Access permissions for a GitHub organization https://github.com/2DegreesInvesting/ds-incubator/issues/14 https://twitter.com/mauro_lepore 7.1 Situation You want to propose changes to a source repo on a GitHub organization. Set the usual plumbing (create_from_github()). Initiate and work on your pull request (PR) (pr_init()). Synchronize, push, and submit your PR (pr_sync(), pr_push()). 7.2 Set the usual plumbing Fork source repo to your user account. Create a local clone of your fork. Connect your local clone with your fork (add remote origin). Connect your local clone with the source repo (add remote upstream). 7.3 Initiate and work on your PR Create a local branch to host PR. Change the local clone. Commit informing what changed and why. 7.4 Synchronize, push, and submit your PR Synchronize the source repository to get the latest changes. Push your PR to your fork. Submit your PR from your fork to the source repo. 7.5 But something goes wrong The set up involves too many steps. Unless you do it systematically (e.g. with usethis) sooner or later you will forget some step. For example, these are my most common mistakes: I copy the wrong URL so remote origin points to the source repo instead of my fork. I forget to create a new branch and add commits to my local master branch. 7.6 What happens when you push? Your commit(s) are now in the PR branch of your fork. Your commit(s) are now in the master branch of your fork. Your commit(s) are now in the PR branch of the source repo. Your commit(s) are now in the master branch of the source repo. You fail to push and get an error. It depends on your role and permission level: Roles: Owner, …, member, collaborator. Permission levels: Admin, …, push (write), read. 7.7 Owner, billing manager &amp; member Organization members can have owner, billing manager, or member roles. Owners have complete administrative access to your organization, while billing managers can manage billing settings. Member is the default role for everyone else. 7.8 Members, teams &amp; outside collaborators You can set the default of what members can do for all repos. You can manage access permissions for multiple members at a time with teams. You can invite outside collaborators to give them access to specific repositories. 7.9 Permission levels for repositories Read: Recommended for non-code contributors who want to view or discuss your project. Triage: Recommended for contributors who need to proactively manage issues and PRs without write access. Write: Recommended for contributors who actively push to your project. Maintain: Recommended for project managers who need to manage the repository without access to sensitive or destructive actions. … 7.10 Permission levels for repositories (continued) … Admin: Recommended for people who need full access to the project, including sensitive and destructive actions like managing security or deleting a repository. Organization owners have admin permissions for every repository owned by the organization (table). 7.11 Example 7.11.1 Org settings: People 7.11.2 An owner’s privileges 7.11.3 Org settings: Member privileges 7.11.4 Repo settings: Collaborators &amp; teams 7.11.5 Repo settings: Branches 7.12 Conclusion “You do not rise to the level of your goals. You fall to the level of your systems” – James Clear, Atomic Habits People should have just the access they need. Be pragmatic. "],
["avoid-hidden-arguments.html", "Chapter 8 2019-12-03: Avoid hidden arguments 8.1 Hidden arguments make code harder to reason about, because to correctly predict the output you also need to know some other state 8.2 Functions are easier to understand if the results depend only on the values of the inputs 8.3 How can I remediate the problem? 8.4 For example, take prepare_data() 8.5 1. prepare_data() gains the explicit argument data 8.6 2. prepare_data() now prints data 8.7 But data should be supplied 8.8 A function has hidden arguments when it returns different results with the same inputs in a surprising way 8.9 Surprising 8.10 Not surprising", " Chapter 8 2019-12-03: Avoid hidden arguments – Tidyverse design guide https://twitter.com/mauro_lepore License: CCO 8.1 Hidden arguments make code harder to reason about, because to correctly predict the output you also need to know some other state y &lt;- 1 add &lt;- function(x) { x + y } add(1) #&gt; [1] 2 y &lt;- 10 ## It is hard to keep track of this add(1) #&gt; [1] 11 8.2 Functions are easier to understand if the results depend only on the values of the inputs 8.3 How can I remediate the problem? If you have an existing function with a hidden input: Make sure the input is an explicit option. Make sure it’s printed. 8.4 For example, take prepare_data() The output depends on data, but it is hidden. prepare_data &lt;- function() { data &lt;- read.csv(path) data[1:2, 1:2] } path &lt;- tempfile() readr::write_csv(mtcars, path) prepare_data() #&gt; mpg cyl #&gt; 1 21 6 #&gt; 2 21 6 8.5 1. prepare_data() gains the explicit argument data prepare_data &lt;- function(data = read.csv(path)) { data[1:2, 1:2] } prepare_data() #&gt; mpg cyl #&gt; 1 21 6 #&gt; 2 21 6 8.6 2. prepare_data() now prints data prepare_data &lt;- function(data = read.csv(path)) { if (missing(data)) { message( &quot;Using `data` with names: &quot;, paste(names(data), collapse = &quot;, &quot;) ) } data[1:2, 1:2] } prepare_data() #&gt; Using `data` with names: mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #&gt; mpg cyl #&gt; 1 21 6 #&gt; 2 21 6 prepare_data(read.csv(path)) #&gt; mpg cyl #&gt; 1 21 6 #&gt; 2 21 6 8.7 But data should be supplied Data arguments provide the core data. They are required, and are usually vectors and often determine the type and size of the output. Data arguments are often called data, x, or y – tidyverse design guide. prepare_data &lt;- function(data) { data[1:2, 1:2] } try(prepare_data()) #&gt; Error in prepare_data() : argument &quot;data&quot; is missing, with no default data &lt;- read.csv(path) prepare_data(data) #&gt; mpg cyl #&gt; 1 21 6 #&gt; 2 21 6 Some functions do need to depend on external state … 8.8 A function has hidden arguments when it returns different results with the same inputs in a surprising way 8.9 Surprising getOption(&quot;stringsAsFactors&quot;) #&gt; [1] TRUE data.frame(x = &quot;a&quot;)$x #&gt; [1] a #&gt; Levels: a old_options &lt;- options(stringsAsFactors = FALSE) on.exit(old_options) getOption(&quot;stringsAsFactors&quot;) #&gt; [1] FALSE data.frame(x = &quot;a&quot;)$x #&gt; [1] &quot;a&quot; Global options should not affect computation. 8.10 Not surprising read_csv(path) depends not only on path but also on the contents of the file, but that is not surprising. library(readr) path &lt;- tempfile() write_csv(mtcars, path) names(read_csv(path)) #&gt; [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; #&gt; [11] &quot;carb&quot; write_csv(iris, path) names(read_csv(path)) #&gt; [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; "],
["reprex.html", "Chapter 9 2019-12-10 reprex 9.1 The working directory", " Chapter 9 2019-12-10 reprex reprex usage Reprex do’s and don’ts This seems like a lot of work! Using datapasta with reprex 9.1 The working directory By default, reprex works on a temporary directory. reprex::reprex(getwd()) yields getwd() #&gt; [1] &quot;C:/Users/Mauro/AppData/Local/Temp/RtmpcDRddU/reprex108c190d657&quot; Use outfile = NA to work on your project’s working directory. reprex::reprex(getwd(), outfile = NA) yields getwd() #&gt; [1] &quot;C:/Users/Mauro/git/ds-incubator&quot; (See the full description of outfile at ?reprex::reprex().) And reprex::reprex(readr::read_csv(&quot;your-file.csv&quot;), outfile = NA) yields readr::read_csv(&quot;your-file.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; Time = col_double(), #&gt; demand = col_double() #&gt; ) #&gt; # A tibble: 6 x 2 #&gt; Time demand #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 8.3 #&gt; 2 2 10.3 #&gt; 3 3 19 #&gt; 4 4 16 #&gt; 5 5 15.6 #&gt; 6 7 19.8 "],
["reusing-tidyverse-code.html", "Chapter 10 2019-12-17: Reusing tidyverse code 10.1 Resources", " Chapter 10 2019-12-17: Reusing tidyverse code 10.1 Resources Tidy eval in context, rstudio::conf 2019, Jenny Bryan. Reusing tidyverse code, UseR 2019, Lionel Henry. Advanced R, ed. 2, ch. 17-21, Hadley Wickham. rlang package, Lionel Henry, Hadley Wickham. "],
["retrospective.html", "Chapter 11 2020-01-07: Retrospective", " Chapter 11 2020-01-07: Retrospective CJ Yetman and Mauro Lepore https://github.com/2DegreesInvesting/ds-incubator/issues/18 "],
["project-oriented-workflow.html", "Chapter 12 2020-01-14: Project-oriented workflow 12.1 Workflow versus product 12.2 Self-contained projects 12.3 setwd( ) 12.4 rm(list = ls( ))", " Chapter 12 2020-01-14: Project-oriented workflow Project-oriented workflow –Jenny Bryan 12.1 Workflow versus product 12.1.1 Definitions Workflow: personal taste and habits. Product: essence of your project. Don’t hardwire your workflow into your product. 12.1.2 Which is workflow or product? The editor you use to write your R code. The raw data. The name of your home directory. The R code someone needs to run on your raw data to get your results, including the explicit library() calls to load necessary packages. 12.1.3 Example: Remove workflow The name of the home directory is workflow, not product. home &lt;- &quot;C:/Users/Mauro/Documents/&quot; # Workflow proj_path &lt;- &quot;path/to/project&quot; paste0(home, proj_path) #&gt; [1] &quot;C:/Users/Mauro/Documents/path/to/project&quot; Better proj_path &lt;- &quot;path/to/project&quot; fs::path_home_r(proj_path) #&gt; /home/mauro/path/to/project Best fs::path_home_r(&quot;path&quot;, &quot;to&quot;, &quot;project&quot;) #&gt; /home/mauro/path/to/project 12.2 Self-contained projects 12.2.1 Self-contained projects can be moved around on your computer or onto other computers and will still “just work”. It’s like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety. –Jenny Bryan 12.2.2 What do they look like? The Project folder contains all relevant files. Any .R can run from a fresh R process with wd set to root. Any .R creates all it needs, in its own workspace or folder Any .R touches nothing it didn’t create (e.g. doesn’t install). 12.2.3 Violations … 12.2.4 What should you do instead of this? path_to_data &lt;- &quot;../datasets/my-data.csv&quot; 12.2.5 What should you do instead? 12.2.6 What should you do instead of this? pacman::p_load(random) 12.3 setwd( ) 12.3.1 What’s wrong? library(ggplot2) setwd(&quot;/Users/jenny/cuddly_broccoli/verbose_funicular/foofy/data&quot;) df &lt;- read.delim(&quot;raw_foofy_data.csv&quot;) p &lt;- ggplot(df, aes(x, y)) + geom_point() ggsave(&quot;../figs/foofy_scatterplot.png&quot;) 12.3.2 What’s wrong? Paths work for nobody besides the author. Project not self-contained and portable. To run, it first needs to be hand edited. Suggests that the useR does all of their work in one R process: Unpleasant to work on more than one project at a time Easy for work done on one project to accidentally leak into another (e.g., objects, loaded packages, session options). 12.3.3 What should you do instead? Use RStudio projects, and/or Use the here package (works well with .Rmd files) library(ggplot2) library(here) df &lt;- read.delim(here(&quot;data&quot;, &quot;raw_foofy_data.csv&quot;)) p &lt;- ggplot(df, aes(x, y)) + geom_point() ggsave(here(&quot;figs&quot;, &quot;foofy_scatterplot.png&quot;)) 12.4 rm(list = ls( )) 12.4.1 What’s wrong? Suggests the useR works in one long-running (not fresh) R process. Does NOT, in fact, create a fresh R process – it only deletes objects from the global workspace but leaves stuff that make your script vulnerable to hidden dependencies (e.g. packages, options, working directory). Is hostile to anyone that you ask to help you with your R problems. 12.4.2 What’s better? Start from blank slate. Restart R very often. Re-run your under-development script from the top. For long running processes: Isolate slow bit in its own script; write it with saveRDS() and read it with readRDS(), or Use drake. 12.4.3 Discuss: Must have or nice to have? The importance of these practices has a lot to do with whether your code will be run by other people, on other machines, and in the future. If your current practices serve your purposes, then go forth and be happy – Jenny Bryan 12.4.4 Learn more What They Forgot to Teach You About R (Jenny Bryan &amp; Jim Hester). "],
["debugging-with-rstudio.html", "Chapter 13 2020-01-21: Debugging with rstudio", " Chapter 13 2020-01-21: Debugging with rstudio Jackson Hoffart https://github.com/2DegreesInvesting/ds-incubator/issues/21 "],
["our-resources.html", "Chapter 14 2020-01-28: Our resources 14.1 ds-incubator eBook: bit.ly/2dii-ds-incubator 14.2 ds-incubator on rstudio.cloud: bit.ly/rs-cloud-ds-incubator 14.3 # coding 14.4 Miscellaneous resources 14.5 Poroposed topics for meetups (#11) 14.6 Gotchas 14.7 r2dii", " Chapter 14 2020-01-28: Our resources 14.1 ds-incubator eBook: bit.ly/2dii-ds-incubator 14.2 ds-incubator on rstudio.cloud: bit.ly/rs-cloud-ds-incubator 14.3 # coding 14.4 Miscellaneous resources 14.5 Poroposed topics for meetups (#11) 14.6 Gotchas 14.7 r2dii "],
["r-packages-setup.html", "Chapter 15 2020-02-04: R packages: Setup 15.1 https://r-pkgs.org/whole-game.html 15.2 The demo package 15.3 Packaging gotchas", " Chapter 15 2020-02-04: R packages: Setup 15.1 https://r-pkgs.org/whole-game.html 15.2 The demo package On RStudio desktop, I created the demo package and pushed it to GitHub. create_package(&quot;demo&quot;) use_git() use_github(&quot;2degreesinvesting&quot;) On GitHub, I forked the demo package from 2degreesinvesting/demo to maurolepore/demo. On the ds-incubator workspace on rstudio.cloud, I created a new repo from GitHub and added packages from the base project (devtools and friends). You may copy the demo project from rstudio.cloud: https://rstudio.cloud/spaces/47358/project/908370 15.3 Packaging gotchas "],
["r-packages-data.html", "Chapter 16 2020-02-11: R packages: Data 16.1 Exported data: data/ 16.2 Document exported data 16.3 Internal data: R/sysdata.rda 16.4 Raw data for users: inst/extdata 16.5 dput(), tibble::tribble(), datapasta::tribble_paste()", " Chapter 16 2020-02-11: R packages: Data From https://r-pkgs.org/data.html 16.1 Exported data: data/ If you want to store binary data and make it available to the user, put it in data/. This is the best place to put example datasets. use_data_raw() # data-raw/mini_mtcars.R # Prepare mini_mtcars &lt;- head(mtcars) usethis::use_data(mini_mtcars) 16.2 Document exported data # R/mini_mtcars.R #&#39; First six rows of [datasets::mtcars] #&#39; #&#39; A mini dataset for examples and tests. #&#39; #&#39; @source [datasets::mtcars] &quot;mini_mtcars&quot; 16.3 Internal data: R/sysdata.rda If you want to store parsed data, but not make it available to the user, put it in R/sysdata.rda. This is the best place to put data that your functions need. # data-raw/sysdata.R mini_letters &lt;- head(letters) mini_month &lt;- head(month.abb) usethis::use_data(mini_letters, mini_month, internal = TRUE) 16.4 Raw data for users: inst/extdata If you want to store raw data, put it in inst/extdata. use_directory(&quot;inst/extdata&quot;) system.file(&quot;extdata&quot;, &quot;iris.csv&quot;, package = &quot;readr&quot;, mustWork = TRUE) 16.5 dput(), tibble::tribble(), datapasta::tribble_paste() A simple alternative to these three options is to include it in the source of your package, either creating by hand, or using dput() to serialise an existing data set into R code. datasets::BOD #&gt; Time demand #&gt; 1 1 8.3 #&gt; 2 2 10.3 #&gt; 3 3 19.0 #&gt; 4 4 16.0 #&gt; 5 5 15.6 #&gt; 6 7 19.8 dput(datasets::BOD) #&gt; structure(list(Time = c(1, 2, 3, 4, 5, 7), demand = c(8.3, 10.3, #&gt; 19, 16, 15.6, 19.8)), class = &quot;data.frame&quot;, row.names = c(NA, #&gt; -6L), reference = &quot;A1.4, p. 270&quot;) "],
["testing.html", "Chapter 17 2020-02-18: Testing 17.1 Why? 17.2 How? 17.3 What 17.4 What", " Chapter 17 2020-02-18: Testing From https://r-pkgs.org/tests.html 17.1 Why? 17.2 How? usethis::use_testthat() R/a_function.R tests/testthat/test-a_function.R test_that(&quot;a_function ....&quot;, { expect_that(a_) }) Hierarchical structure 17.3 What Whenever you are tempted to type something into a print statement or a debugger expression, write it as a test instead. — Martin Fowler 17.4 What Test what should work Test what should fail and how "],
["r-packages-documenting.html", "Chapter 18 2020-02-18: R packages: Documenting 18.1 Objectives 18.2 Why is documenting important? 18.3 Code &gt; Insert Roxygen Skeleton 18.4 How useful are examples? 18.5 README: usethis::use_readme_rmd() 18.6 Websites", " Chapter 18 2020-02-18: R packages: Documenting https://github.com/2DegreesInvesting/ds-incubator/issues/26 18.1 Objectives Why documenting your package is important for users and developers. How to generate a roxygen skeleton to document a function. Why the examples section is important? Why README is important? What are common README gotchas Why README can’t find functions in your package? Why README should not use tidyverse How to navigate a package website. 18.2 Why is documenting important? How it helps users? How it helps developers? Why using a consistent format might be useful for users/developers? 18.3 Code &gt; Insert Roxygen Skeleton #&#39; Title #&#39; #&#39; @param x #&#39; #&#39; @return #&#39; @export #&#39; #&#39; @examples f &lt;- function(x) { x } – NOTE: @cjyetman recommended to always document explicitly the expected type of each argument to a function. @2diiKlaus endorsed the comment and asks to do it in all packages we build. @maurolepore would like to develop a template. Follow this discussion. 18.4 How useful are examples? Help users understand how to use a function. Help developers understand what a function should do. Can be reused in tests/ and README 18.5 README: usethis::use_readme_rmd() Gotchas: Used packages (library()) need to be listed in DESCRIPTION. Your package needs to be installed (devtools::install()). Needs to be in sync with README.md (i.e. must knit). tip: tidyverse is for EDA not packages (This rigor feels annoying but helps find problems with the package structure.) 18.6 Websites usethis::use_pkgdown() + pkgdown::build_site(). GitHub &gt; Settings &gt; GitHub Pages: Choose “master branch docs/ folder” "],
["whatch-out-for-type-inconsistent-code.html", "Chapter 19 Whatch out for type-inconsistent code", " Chapter 19 Whatch out for type-inconsistent code CJ https://github.com/2DegreesInvesting/ds-incubator/issues/28 "],
["gotchas-when-moving-code-from-a-script-to-an-r-package.html", "Gotchas when moving code from a script to an R package 19.1 Packaging 19.2 Function interface 19.3 Code smells and feels 19.4 Error prone 19.5 Style", " Gotchas when moving code from a script to an R package 19.1 Packaging 19.1.1 Setup: R, RStudio, Git, GitHub These steps will direct you to relevant chapters from “Happy Git with R” by Jenny Bryan et. al. Register a free GitHub account Install or update R and RStudio Install Git Introduce yourself to Git Prove local Git can talk to GitHub Cache your username and password or set up SSH keys Create and save a GitHub Personal Access Token (PAT) Prove RStudio can find local Git and, therefore, can talk to GitHub 19.1.2 Setup: devtools and testthat Make the devtools and testthat packages available in every R session. Edit your .Rprofile file to include this code (you may use usethis::edit_r_profile()): if (interactive()) { suppressMessages(require(devtools)) suppressMessages(require(testthat)) } (Your .Rprofile should NOT include data analysis packages such as dplyr or ggplot2.) Ensure you always start each session with a blank slate: Save, close and restart R. 19.1.3 use_data_raw(), then use_data() Good. # &gt; Console use_data_raw() # data-raw/dataset-name.R dataset_name &lt;- readxl::read_excel(&quot;data-raw/dataset-name.xlsx&quot;) use_data(dataset_name) # R/dataset_name.R #&#39; A dataset #&#39; &quot;dataset_name&quot; # R/any-file.R f &lt;- function() { dataset_name } Bad. # R/any-file.R dataset_name &lt;- readxl::read_excel(&quot;data/dataset-name.xlsx&quot;) f &lt;- function() { dataset_name } Bad. f &lt;- function() { load(&quot;data/dataset_name.rda&quot;) } http://r-pkgs.had.co.nz/data.html 19.1.4 Consider using internal data Good. # data-raw/my_internal_data.R use_data(my_internal_data, internal = TRUE) # R/any.R f &lt;- function(data) { dplyr::left_join(data, my_internal_data) } Bad. # R/any.R my_internal_data &lt;- mtcars %&gt;% dplyr::select(cyl) f &lt;- function(data) { dplyr::left_join(data, my_internal_data) } http://r-pkgs.had.co.nz/data.html#data-sysdata 19.1.5 use_package(\"dplyr\") not library(dplyr) Good. use_package(&quot;dplyr&quot;) Bad. library(dplyr) https://r-pkgs.org/whole-game.html 19.1.6 namespace::function_from_other_package() Good. f &lt;- function(data) { utils::head(dplyr::select(data, dplyr::last_col())) } Good. #&#39; @importFrom magrittr %&gt;% #&#39; @importFrom utils head #&#39; @importFrom dplyr select last_col f &lt;- function(data) { data %&gt;% select(last_col()) %&gt;% head() } Bad. f &lt;- function(data) { head(select(data, last_col())) } Bad. f &lt;- function(data) { data %&gt;% select(last_col()) %&gt;% head() } 19.1.7 The tidyverse is for EDA, not packages Good. use_package(&quot;dplyr&quot;) use_package(&quot;tidyr&quot;) Bad. use_package(&quot;tidyverse&quot;) https://www.tidyverse.org/blog/2018/06/tidyverse-not-for-packages/ 19.1.8 Use the .data pronoun Good. f &lt;- function(data, column_name) { dplyr::select(data, .data[[column_name]]) } Ok. f &lt;- function(data) { stopifnot(hasName(mtcars, &quot;cyl&quot;)) dplyr::select(data, .data$cyl) } Bad. f &lt;- function(data) { dplyr::select(data, cyl) } https://rlang.r-lib.org/reference/tidyeval-data.html 19.2 Function interface 19.2.1 Avoid relying on the global environment Good. f &lt;- function(data) { data } my_data &lt;- tibble::tibble(x = 1) f(my_data) #&gt; # A tibble: 1 x 1 #&gt; x #&gt; &lt;dbl&gt; #&gt; 1 1 Bad. f &lt;- function(data = my_data2) { data } ls() #&gt; [1] &quot;f&quot; &quot;my_data&quot; try(f()) #&gt; Error in f() : object &#39;my_data2&#39; not found my_data2 &lt;- tibble::tibble(x = 1) ls() #&gt; [1] &quot;f&quot; &quot;my_data&quot; &quot;my_data2&quot; f() #&gt; # A tibble: 1 x 1 #&gt; x #&gt; &lt;dbl&gt; #&gt; 1 1 19.2.2 Avoid modifying the global environment, e.g. with &lt;&lt;- Setup. readr::write_csv(mtcars, &quot;some_data.csv&quot;) Good. some_data_path &lt;- function() { fs::path(&quot;some_data.csv&quot;) } some_data_path() #&gt; some_data.csv read_some_data &lt;- function(path) { suppressMessages(head(readr::read_csv(path))) } path &lt;- some_data_path() # Define path read_some_data(path) #&gt; # A tibble: 6 x 11 #&gt; mpg cyl disp hp drat wt qsec vs am gear carb #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4 #&gt; 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4 #&gt; 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 #&gt; 4 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 #&gt; 5 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 #&gt; 6 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 Bad. some_data_path &lt;- function() { path &lt;&lt;- &quot;some_data.csv&quot; } read_some_data &lt;- function() { suppressMessages(head(readr::read_csv(path))) } some_data_path() # Define path read_some_data() #&gt; # A tibble: 6 x 11 #&gt; mpg cyl disp hp drat wt qsec vs am gear carb #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4 #&gt; 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4 #&gt; 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 #&gt; 4 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 #&gt; 5 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 #&gt; 6 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 “[Avoid global variables because they] introduce non-obvious dependencies between functions” – Advanced R, Environments). For valid uses of &lt;&lt;- see (Advanced R, Function factories). Clean up. fs::file_delete(&quot;some_data.csv&quot;) 19.2.3 Arguments that provide core data are required Good. f &lt;- function(data) { data } f(mtcars) Bad. f &lt;- function(data = mtcars) { data } f() Arguments that provide core data are required (have no default); they are often called data, x, or y). – Adapted from https://principles.tidyverse.org/args-data-details.html 19.2.4 Descriptor arguments are usually required Good. forecast &lt;- function(data, start_year, time_span = 5) { end_year &lt;- start_year + time_span time_period &lt;- data$year &gt;= start_year &amp; data$year &lt;= end_year data %&gt;% filter(time_period) %&gt;% # ... } Bad. forecast &lt;- function(data, start_year = 2020, time_span = 5) { # ... } Descriptor arguments describe essential details of the operation, and are usually required. – Adapted from https://principles.tidyverse.org/args-data-details.html 19.2.5 Avoid reading and writing operations Unless it is precisely the purpose of your function, avoid operations that read or write data (in general, avoid side effects). Good. f &lt;- function(data) { dplyr::select(data, 1L) } Bad. f &lt;- function(path) { data &lt;- readxl::read_excel(path) dplyr::select(data, 1L) } What is a pure function. Avoid hidden arguments (ds-incubator). 19.3 Code smells and feels 19.3.1 Simplify if() with objects named meaningfully x &lt;- sample(c(1:10), size = 2, replace = TRUE) say &lt;- function(x, msg) paste(paste(x, collapse = &quot;, &quot;), msg) say(1:2, &quot;Hey!&quot;) #&gt; [1] &quot;1, 2 Hey!&quot; Good. is_even_between_5and10 &lt;- (x %% 2 == 0) &amp; dplyr::between(x, 5L, 10L) if (all(is_even_between_5and10)) { say(x, &quot;Yeah!&quot;) } else { say(x, &quot;Nope!&quot;) } #&gt; [1] &quot;7, 4 Nope!&quot; Bad. if (all((x %% 2 == 0) &amp; (x &gt;= 5L) &amp; (x &lt;= 10L))) { say(x, &quot;Yeah!&quot;) } else { say(x, &quot;Nope!&quot;) } #&gt; [1] &quot;7, 4 Nope!&quot; https://speakerdeck.com/jennybc/code-smells-and-feels?slide=36 19.3.2 Program for columns with clean_names Good. f &lt;- function(data) { clean &lt;- r2dii.utils::clean_column_names(data) stopifnot(hasName(clean, &quot;a_column&quot;)) result &lt;- dplyr::select(clean, .data$a_column) r2dii.utils::unclean_column_names(result, data) } f(tibble::tibble(A.Column = 1, Another.Column = 1)) #&gt; # A tibble: 1 x 1 #&gt; A.Column #&gt; &lt;dbl&gt; #&gt; 1 1 Bad. f &lt;- function(data) { dplyr::select(data, .data$A.Column) } f(tibble::tibble(A.Column = 1, Another.Column = 1)) #&gt; # A tibble: 1 x 1 #&gt; A.Column #&gt; &lt;dbl&gt; #&gt; 1 1 ?clean_column_names() 19.3.3 Avoid long-running temporary objects Avoid temporary variables unless they run for only a few, consecutive lines. Good. tmp &lt;- dplyr::filter(mtcars, cyl &gt; 4) tmp &lt;- dplyr::select(tmp, disp) tmp &lt;- head(tmp) # ... more unrelated code Better. mtcars %&gt;% dplyr::filter(cyl &gt; 4) %&gt;% dplyr::select(disp) %&gt;% head() Bad. tmp &lt;- dplyr::filter(mtcars, cyl &gt; 4) tmp &lt;- dplyr::select(tmp, disp) # ... more unrelated code (makes your forget what `tmp` holds) tmp &lt;- head(tmp) 19.3.4 If possible, extract functions to the top level Good. f &lt;- function(x) { g(x) } g &lt;- function(x) { x + 1 } Bad. f &lt;- function(x) { g &lt;- function(x) { x + 1 } g(x) } 19.3.5 Extract commented sections into functions Good. f &lt;- function(x) { y &lt;- calculate_y(x) # ... more code } calculate_y &lt;- function(x) { x^x * x/2L # ... more code specifically about calculating y } Bad. f &lt;- function(x) { # calculate y y &lt;- x^x * x/2L # ... more code specifically about calculating y # ... more code } 19.4 Error prone 19.4.1 Avoid hidden arguments: Extract functions with all arguments Good. f &lt;- function(x, y, z) { x + g(y, z) } g &lt;- function(y, z) { y + z } f(1, 1, 1) #&gt; [1] 3 Bad. # Fragile. f &lt;- function(x, y, z) { g &lt;- function(y) { # `z` is outside of the scope of g(). It&#39;s a hidden argument y + z } x + g(y) } f(1, 1, 1) #&gt; [1] 3 # f() breaks when you move g() to the top level f &lt;- function(x, y, z) { x + g(y) } g &lt;- function(y) { y + z } try(f(1, 1, 1)) #&gt; Error in g(y) : object &#39;z&#39; not found 19.4.2 Separate functions, data, and scripts 19.4.3 A non-package project It’s easy for an analyst to maintain a project when functions, data, and scripts are separate. Good. # R/all-functions.R f &lt;- function(data) { # ... some code } # data/all-datasets.R some_data &lt;- readr::read_csv(here::here(&quot;data-raw&quot;, &quot;some_data.csv&quot;)) # script/this-script.R library(tidyverse) source(here::here(&quot;R&quot;, &quot;all-functions.R&quot;)) source(here::here(&quot;data&quot;, &quot;all-datasets.R&quot;)) f(data = some_data) It is error prone to mix functions, data, and scripts. The mess hides inter dependencies that can break your code unexpectedly. Also, this makes it hard for others to reproduce, or understand your code – the maintainance programmer can only view your code through a toilet paper tube. Bad. # sripts-functions-and-data.R library(tidyverse) some_data &lt;- readr::read_csv(here::here(&quot;data-raw&quot;, &quot;some_data.csv&quot;)) f &lt;- function(some_data) { some_data %&gt;% dplyr::select() %&gt;% # ... more code } f(some_data) 19.4.4 A package project When functions, data, and scripts are separate, it’s easy for a developer to transform a project into an R package. Functions go in the R/ directory, raw data in data-raw/, and data in data/. Scripts become examples, tests, and higher level documentation such as README, and the Home and articles pages of the package-website. 19.4.5 if() uses a single TRUE or FALSE x &lt;- c(1, 2) y &lt;- 0L Good # Good if (identical(x, c(1, 2))) { say(identical(x, c(1, 2)), &quot;is what you gave.&quot;) } #&gt; [1] &quot;TRUE is what you gave.&quot; # Bad if (x == c(1, 2)) { say(x == c(1, 2), &quot;is what you gave.&quot;) } #&gt; Warning in if (x == c(1, 2)) {: the condition has length &gt; 1 and only the first #&gt; element will be used #&gt; [1] &quot;TRUE, TRUE is what you gave.&quot; Caveats: https://github.com/2DegreesInvesting/ds-incubator/issues/13 19.4.6 1 is equal to 1L but not identical Careful! 1 == 1L #&gt; [1] TRUE identical(1, 1L) #&gt; [1] FALSE Good this_integer &lt;- 1L if (!identical(this_integer, 1)) &quot;Not the same&quot; else &quot;Wrong result&quot; #&gt; [1] &quot;Not the same&quot; Bad. this_integer &lt;- 1L if (!this_integer == 1) &quot;Not the same&quot; else &quot;Wrong result&quot; #&gt; [1] &quot;Wrong result&quot; 19.5 Style 19.5.1 Limit your code to 80 characters per line For reference, in RStudio you can set a margin column at 80 characters (Tools &gt; Global Options &gt; Code &gt; Show margin &gt; Margin column). Strive to limit your code to 80 characters per line. This fits comfortably on a printed page with a reasonably sized font. If you find yourself running out of room, this is a good indication that you should encapsulate some of the work in a separate function. – https://style.tidyverse.org/syntax.html#long-lines If a function definition runs over multiple lines, indent the second line to where the definition starts. – https://style.tidyverse.org/functions.html#long-lines-1 19.5.2 Names should use only lowercase letters, numbers, and \"_\". Generally, variable names should be nouns and function names should be verbs. Strive for names that are concise and meaningfully! Reserve dots exclusively for the S3 object system. Good. add_row() permute() Bad. row_adder() permutation() https://style.tidyverse.org/syntax.html#object-names https://style.tidyverse.org/functions.html#naming 19.5.3 Avoid T and F as synonyms for TRUE and FALSE Good sum(1, 1, na.rm = TRUE) Bad. sum(1, 1, na.rm = T) TRUE and FALSE are reserved words; T and F are not. T &lt;- &quot;Whatever&quot; T #&gt; [1] &quot;Whatever&quot; # Forbidden try(TRUE &lt;- &quot;Whatever&quot;) #&gt; Error in TRUE &lt;- &quot;Whatever&quot; : #&gt; invalid (do_set) left-hand side to assignment https://www.r-bloggers.com/r-tip-avoid-using-t-and-f-as-synonyms-for-true-and-false/ 19.5.4 Reserve return() to return early Only use return() for early returns. Otherwise, rely on R to return the result of the last evaluated expression https://style.tidyverse.org/functions.html#return 19.5.5 Return invisibly only when the main purpose is a side effect Good. # Main purpose is a side effect: To throw an error if the input is bad check_f &lt;- function(x) { stopifnot(is.numeric(x)) invisible(x) } Good. # Main purpose is not a side effect. Returning visibly f &lt;- function(x) { x + 1 } f(1) #&gt; [1] 2 Bad. # Main purpose is not a side effect. Returning invisibly f &lt;- function(x) { out &lt;- x + 1 } # Returns invisibly f(1) out &lt;- f(1) out #&gt; [1] 2 "]
]
