[
["pair-programming.html", "Chapter 20 2020-03-10: Pair programming 20.1 Overview 20.2 Driver - navigator 20.3 Ping pong 20.4 Strong-Style Pairing 20.5 Discuss: Benefits (5’) 20.6 Discuss: Challenges (5’) 20.7 To pair or not to pair 20.8 Problems with code review vs. pairing 20.9 Why bother?", " Chapter 20 2020-03-10: Pair programming 20.1 Overview benefits are not immediately obvious not as simple as “two people working at a single computer” feels uncomfortable vital for collaborative teamwork and high quality software 20.2 Driver - navigator 20.3 Ping pong 20.4 Strong-Style Pairing The rule: For an idea to go from your head into the computer it MUST go through someone else’s hands. Particularly useful for knowledge transfer 20.5 Discuss: Benefits (5’) Knowledge Sharing Reflection Keeping focus Code review on-the-go Two modes of thinking combined Collective Code Ownership Keeps the team’s WIP low Fast onboarding of new team members 20.6 Discuss: Challenges (5’) Pairing can be exhausting Intense collaboration can be hard Interruptions by meetings Different skill levels Power Dynamics Pairing with lots of Unknowns No time for yourself Rotations lead to context switching Pairing requires vulnerability Convincing managers and co-workers 20.7 To pair or not to pair Boring Tasks Need space to figure things out 20.8 Problems with code review vs. pairing not looking too closely at the code. avoid rework for something that we invested in. disruptive to switch context 20.9 Why bother? It takes: Concentration and focus (suitable style), task organization (issues), time management (pomodoro), communication, giving and receiving feedback, empathy, vulnerability Work on getting better at it, you will end up with a more resilient team. "]
]
